{"ast":null,"code":"import _regeneratorRuntime from\"/Users/davidlee/play/weather-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";import _asyncToGenerator from\"/Users/davidlee/play/weather-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";import _classCallCheck from\"/Users/davidlee/play/weather-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";import _createClass from\"/Users/davidlee/play/weather-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";import _possibleConstructorReturn from\"/Users/davidlee/play/weather-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";import _getPrototypeOf from\"/Users/davidlee/play/weather-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";import _inherits from\"/Users/davidlee/play/weather-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";import React,{Component}from'react';import Header from'./components/Header';import Form from'./components/Form';import Weather from'./components/Weather';var apiKey=\"b39bad181a5f7710d3d7bf7dc42995fb\";var googleApiKey=\"AIzaSyBnQB4IGPDwpThK0ssNAoiD53QsU9QT1QY\";export var App=/*#__PURE__*/function(_Component){_inherits(App,_Component);function App(props){var _this;_classCallCheck(this,App);_this=_possibleConstructorReturn(this,_getPrototypeOf(App).call(this));_this.getWeather=/*#__PURE__*/function(){var _ref=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(e){var city,apiCall,weather;return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:e.preventDefault();city=e.target.elements.city.value;_context.next=4;return fetch(\"http://api.openweathermap.org/data/2.5/weather?q=\".concat(city,\"&appid=\").concat(apiKey,\"&units=metric\"));case 4:apiCall=_context.sent;_context.next=7;return apiCall.json();case 7:weather=_context.sent;if(weather.name===city){_this.setState({temperature:weather.main.temp,city:weather.name,country:weather.sys.country,humidity:weather.main.humidity,description:weather.weather[0].description});}else{alert('Your city is inccorect.');}case 9:case\"end\":return _context.stop();}}},_callee);}));return function(_x){return _ref.apply(this,arguments);};}();_this.state={temperature:'',city:'',country:'',humidity:'',description:'',error:''};return _this;}_createClass(App,[{key:\"render\",value:function render(){return React.createElement(\"div\",{style:{textAlign:'center'}},React.createElement(Header,null),React.createElement(Form,{getWeather:this.getWeather}),React.createElement(Weather,{weather:this.state}));}}]);return App;}(Component);export default App;","map":{"version":3,"sources":["/Users/davidlee/play/weather-app/src/App.js"],"names":["React","Component","Header","Form","Weather","apiKey","googleApiKey","App","props","getWeather","e","preventDefault","city","target","elements","value","fetch","apiCall","json","weather","name","setState","temperature","main","temp","country","sys","humidity","description","alert","state","error","textAlign"],"mappings":"4iCAAA,MAAOA,CAAAA,KAAP,EAAgBC,SAAhB,KAAiC,OAAjC,CACA,MAAOC,CAAAA,MAAP,KAAmB,qBAAnB,CACA,MAAOC,CAAAA,IAAP,KAAiB,mBAAjB,CACA,MAAOC,CAAAA,OAAP,KAAoB,sBAApB,CAGA,GAAMC,CAAAA,MAAM,CAAG,kCAAf,CACA,GAAMC,CAAAA,YAAY,CAAG,yCAArB,CAEA,UAAaC,CAAAA,GAAb,6DACE,aAAYC,KAAZ,CAAmB,qCACjB,uEADiB,MAYnBC,UAZmB,0FAYN,iBAAOC,CAAP,2IACXA,CAAC,CAACC,cAAF,GACMC,IAFK,CAEEF,CAAC,CAACG,MAAF,CAASC,QAAT,CAAkBF,IAAlB,CAAuBG,KAFzB,uBAIWC,CAAAA,KAAK,4DAAqDJ,IAArD,mBAAmEP,MAAnE,kBAJhB,QAILY,OAJK,qCAKWA,CAAAA,OAAO,CAACC,IAAR,EALX,QAKLC,OALK,eAOX,GAAIA,OAAO,CAACC,IAAR,GAAiBR,IAArB,CAA2B,CACzB,MAAKS,QAAL,CAAc,CACZC,WAAW,CAAEH,OAAO,CAACI,IAAR,CAAaC,IADd,CAEZZ,IAAI,CAAEO,OAAO,CAACC,IAFF,CAGZK,OAAO,CAAEN,OAAO,CAACO,GAAR,CAAYD,OAHT,CAIZE,QAAQ,CAAER,OAAO,CAACI,IAAR,CAAaI,QAJX,CAKZC,WAAW,CAAET,OAAO,CAACA,OAAR,CAAgB,CAAhB,EAAmBS,WALpB,CAAd,EAOD,CARD,IAQO,CACLC,KAAK,CAAC,yBAAD,CAAL,CACD,CAjBU,sDAZM,+DAEjB,MAAKC,KAAL,CAAa,CACXR,WAAW,CAAE,EADF,CAEXV,IAAI,CAAE,EAFK,CAGXa,OAAO,CAAE,EAHE,CAIXE,QAAQ,CAAE,EAJC,CAKXC,WAAW,CAAE,EALF,CAMXG,KAAK,CAAE,EANI,CAAb,CAFiB,aAUlB,CAXH,uDAkCW,CAEP,MACE,4BAAK,KAAK,CAAE,CAACC,SAAS,CAAE,QAAZ,CAAZ,EACE,oBAAC,MAAD,MADF,CAEE,oBAAC,IAAD,EAAM,UAAU,CAAE,KAAKvB,UAAvB,EAFF,CAGE,oBAAC,OAAD,EAAS,OAAO,CAAE,KAAKqB,KAAvB,EAHF,CADF,CAQD,CA5CH,iBAAyB7B,SAAzB,EA+CA,cAAeM,CAAAA,GAAf","sourcesContent":["import React, { Component } from 'react'\nimport Header from './components/Header'\nimport Form from './components/Form'\nimport Weather from './components/Weather'\n\n\nconst apiKey = \"b39bad181a5f7710d3d7bf7dc42995fb\"\nconst googleApiKey = \"AIzaSyBnQB4IGPDwpThK0ssNAoiD53QsU9QT1QY\"\n\nexport class App extends Component {\n  constructor(props) {\n    super()\n    this.state = {\n      temperature: '',\n      city: '',\n      country: '',\n      humidity: '',\n      description: '',\n      error: ''\n    }\n  }\n\n  getWeather = async (e) => {\n    e.preventDefault()\n    const city = e.target.elements.city.value\n\n    const apiCall = await fetch(`http://api.openweathermap.org/data/2.5/weather?q=${city}&appid=${apiKey}&units=metric`)\n    const weather = await apiCall.json()\n    \n    if (weather.name === city) {\n      this.setState({\n        temperature: weather.main.temp,\n        city: weather.name,\n        country: weather.sys.country,\n        humidity: weather.main.humidity,\n        description: weather.weather[0].description,\n      }) \n    } else {\n      alert('Your city is inccorect.')\n    }\n  }\n\n\n  render() {\n    \n    return (\n      <div style={{textAlign: 'center'}}>\n        <Header />\n        <Form getWeather={this.getWeather}/>\n        <Weather weather={this.state}/>\n        \n      </div>\n    )\n  }\n}\n\nexport default App\n\n"]},"metadata":{},"sourceType":"module"}
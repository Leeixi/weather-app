{"version":3,"sources":["components/Header.js","components/Form.js","components/Weather.js","App.js","serviceWorker.js","index.js"],"names":["Header","Component","Form","onSubmit","this","props","getWeather","type","name","placeholder","value","Weather","weather","temperature","city","country","humidity","description","apiKey","App","e","a","preventDefault","target","elements","fetch","apiCall","json","setState","main","temp","sys","alert","state","error","style","textAlign","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"qRAYeA,EAVf,iLAEQ,OACI,6BACI,iDAJhB,GAA4BC,aCcbC,EAdf,iLAEQ,OACI,6BACI,0BAAMC,SAAUC,KAAKC,MAAMC,YACvB,2BAAOC,KAAK,OAAOC,KAAK,OAAOC,YAAY,YAC3C,6BACA,2BAAOF,KAAK,SAASG,MAAM,iBAP/C,GAA0BT,aCgBXU,EAhBf,iLACc,IAAD,EACyDP,KAAKC,MAAMO,QAAjEC,EADH,EACGA,YAAaC,EADhB,EACgBA,KAAMC,EADtB,EACsBA,QAASC,EAD/B,EAC+BA,SAAUC,EADzC,EACyCA,YAC9C,OACI,6BACI,4BACKH,GAAQC,GAAW,yCAAeD,EAAf,KAAuBC,GAC1CF,GAAe,2CAAiBA,EAAjB,YACfG,GAAY,wCAAcA,EAAd,KACZC,GAAe,2CAAiBA,SATrD,GAA6BhB,aCIvBiB,EAAS,mCAkDAC,EA/Cf,YACE,WAAYd,GAAQ,IAAD,8BACjB,+CAWFC,WAZmB,uCAYN,WAAOc,GAAP,mBAAAC,EAAA,6DACXD,EAAEE,iBACIR,EAAOM,EAAEG,OAAOC,SAASV,KAAKJ,MAFzB,SAIWe,MAAM,oDAAD,OAAqDX,EAArD,kBAAmEI,EAAnE,kBAJhB,cAILQ,EAJK,gBAKWA,EAAQC,OALnB,QAKLf,EALK,QAOCJ,OAASM,EACnB,EAAKc,SAAS,CACZf,YAAaD,EAAQiB,KAAKC,KAC1BhB,KAAMF,EAAQJ,KACdO,QAASH,EAAQmB,IAAIhB,QACrBC,SAAUJ,EAAQiB,KAAKb,SACvBC,YAAaL,EAAQA,QAAQ,GAAGK,cAGlCe,MAAM,2BAhBG,2CAZM,sDAEjB,EAAKC,MAAQ,CACXpB,YAAa,GACbC,KAAM,GACNC,QAAS,GACTC,SAAU,GACVC,YAAa,GACbiB,MAAO,IARQ,EADrB,sEAoCI,OACE,yBAAKC,MAAO,CAACC,UAAW,WACtB,kBAAC,EAAD,MACA,kBAAC,EAAD,CAAM9B,WAAYF,KAAKE,aACvB,kBAAC,EAAD,CAASM,QAASR,KAAK6B,aAxC/B,GAAyBhC,aCGLoC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.fc7f5c7e.chunk.js","sourcesContent":["import React, { Component } from 'react'\n\nexport class Header extends Component {\n    render() {\n        return (\n            <div>\n                <h1>Weather App!</h1>\n            </div>\n        )\n    }\n}\n\nexport default Header\n","import React, { Component } from 'react'\n\nexport class Form extends Component {\n    render() {\n        return (\n            <div>\n                <form onSubmit={this.props.getWeather}>\n                    <input type=\"text\" name=\"city\" placeholder=\"City...\" />\n                    <br />\n                    <input type=\"submit\" value=\"Search\" />\n                </form>\n            </div>\n        )\n    }\n}\n\nexport default Form\n\n\n","import React, { Component } from 'react'\n\nexport class Weather extends Component {\n    render() {\n        const { temperature, city, country, humidity, description } = this.props.weather\n        return (\n            <div>\n                <ul>\n                    {city && country && <p>Location:  {city}, {country}</p>}\n                    {temperature && <p>Temperature: {temperature} Celsius</p>}\n                    {humidity && <p>Humidity: {humidity}%</p>}\n                    {description && <p>Description: {description}</p>}\n                </ul>\n            </div>\n        )\n    }\n}\n\nexport default Weather\n","import React, { Component } from 'react'\nimport Header from './components/Header'\nimport Form from './components/Form'\nimport Weather from './components/Weather'\n\n\nconst apiKey = \"b39bad181a5f7710d3d7bf7dc42995fb\"\nconst googleApiKey = \"AIzaSyBnQB4IGPDwpThK0ssNAoiD53QsU9QT1QY\"\n\nexport class App extends Component {\n  constructor(props) {\n    super()\n    this.state = {\n      temperature: '',\n      city: '',\n      country: '',\n      humidity: '',\n      description: '',\n      error: ''\n    }\n  }\n\n  getWeather = async (e) => {\n    e.preventDefault()\n    const city = e.target.elements.city.value\n\n    const apiCall = await fetch(`http://api.openweathermap.org/data/2.5/weather?q=${city}&appid=${apiKey}&units=metric`)\n    const weather = await apiCall.json()\n    \n    if (weather.name === city) {\n      this.setState({\n        temperature: weather.main.temp,\n        city: weather.name,\n        country: weather.sys.country,\n        humidity: weather.main.humidity,\n        description: weather.weather[0].description,\n      }) \n    } else {\n      alert('Your city is inccorect.')\n    }\n  }\n\n\n  render() {\n    \n    return (\n      <div style={{textAlign: 'center'}}>\n        <Header />\n        <Form getWeather={this.getWeather}/>\n        <Weather weather={this.state}/>\n        \n      </div>\n    )\n  }\n}\n\nexport default App\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}